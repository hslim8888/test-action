name: Deploy Log
on:
  push:
    # 여기에 branches를 넣으면 or 조건으로 동작함
    # tags 로만 트리거 되는 동작은 github.ref 가 refs/tags/{tag-name} 이고,
    # checkout 을 하면 detached HEAD 상태로 동작
        # 또한, 태그 ref를 가져오기 위해 fetch-depth: 0 을 꼭 해줘야 함. 아니면 해당 커밋만 가져옴.
        # 브랜치 정보를 가져올 수 없어서 main 여부 체크를 할 수 없음.
    tags:
      - 'trigger*'

jobs:
  deploy-log:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v1
        with:
          fetch-depth: 0

      - name: Get tag annotation
        id: tag
        run: |
          if [ -z "${PROVIDED_TAG}" ]; then
            TAG_ANNOTATION=$(git for-each-ref "${GITHUB_REF}" --format '%(contents)')
          else
            TAG_ANNOTATION=$(git for-each-ref "refs/tags/${PROVIDED_TAG}" --format '%(contents)')
          fi
          echo "$TAG_ANNOTATION"
          echo "::set-output name=annotation::$TAG_ANNOTATION"

          


      # tag format: trigger-v2023-06-01-0915
      - name: Get triggered tag
        id: trigger_tag
        run: |
          echo ::set-output name=tag::$(git describe --tags --abbrev=0 | grep trigger)
      - name: Set new info
        id: new
        run: |
          echo ::set-output name=commit::$(git show-ref -s ${{ steps.trigger_tag.outputs.tag }})
          echo ::set-output name=tag::$(echo ${{ steps.trigger_tag.outputs.tag }} | cut -d'-' -f2-5)
          echo ::set-output name=commit_time::$(git show -s --format=%cd --date=iso-strict ${{ steps.trigger_tag.outputs.tag }} | tail -n 1)

      - name: print new
        run: |
          echo ${{ steps.new.outputs.commit }}
          echo ${{ steps.new.outputs.tag }}
          echo ${{ steps.new.outputs.commit_time }}

      - name: deploy log title
        id: deploy_log_title
        run: |
          echo ::set-output name=title::${{ steps.tag.outputs.annotation || steps.new.outputs.tag }}

      - name: print title
        run: |
          echo ${{ steps.deploy_log_title.outputs.title }}

      - name: get message if tag is annotate tag
        id: annotate_tag
        run: |
          echo ::set-output name=annotate::$(git checkout main && git fetch && git tag -l --format='%(contents)' ${{ steps.trigger_tag.outputs.tag }})

      - name: print annotate message
        run: |
          echo ${{ steps.annotate_tag.outputs.annotate }}

      - name: Get latest deploy log
        id: latest_log
        run: |
          echo ::set-output name=tag::$(git tag --sort=-creatordate | grep -v trigger | sed -n 1p)
          echo ::set-output name=commit::$(git show-ref -s $(git tag --sort=-creatordate | grep -v trigger | sed -n 1p))
          echo ::set-output name=commit_time::$(git show -s --format=%cd --date=iso-strict $(git tag --sort=-creatordate | grep -v trigger | sed -n 1p))

      - name: List merged PRs
        id: pr_list
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_list=$(gh pr list --search "is:merged merged:${{ steps.latest_log.outputs.commit_time }}..${{ steps.new.outputs.commit_time }}" | awk -F '\t' '{print "#" $1, $2, $3}')
          pr_list="${pr_list//$'\n'/'%0A'}"  
          echo "::set-output name=pr_list::$pr_list"

      - name: Get changelog
        id: changelog
        run: |
          echo ::set-output name=changelog::$(git log --pretty=format:"[%h](https://github.com/hslim8888/test-action/commit/%h) - <b>%s</b></br>" ${{ steps.latest_log.outputs.commit }}..${{ steps.new.outputs.commit }})

      - name: print pr list
        run: |
          echo ${{ steps.pr_list.outputs.pr_list }}
          pr_list=$(echo "${{ steps.pr_list.outputs.pr_list }}" | head -n 2)
          pr_list="${pr_list//$'\n'/'%0A'}"
          echo $pr_list_lines

      - name: git log head 3
        id: log
        run: |
          log=$(echo "$(git log --pretty=format:'%h - %s')" | head -n 3)
          log="${log//$'\n'/'%0A'}"  
          echo "::set-output name=pr_list::$pr_list"

      - name: print log
        run: |
          echo ${{ steps.log.outputs.log }}

      - name: make body
        id: body
        run: |
          pr_list_lines=$(echo "${{ steps.pr_list.outputs.pr_list }}" | head -n 2)
          log=$(echo "$(git log --pretty=format:'%h - %s')" | head -n 3)
          log="${log//$'\n'/'%0A'}"
          four_line_var="${pr_list_lines}${log}"
          echo "::set-output name=four_line_var::${four_line_var}"
      - name: print
        run: |
          echo ${{ steps.body.outputs.four_line_var }}


#      - name: Create a release
#        uses: ncipollo/release-action@v1
#        with:
#          tag: ${{ steps.new.outputs.tag }}
#          name: Release ${{ steps.new.outputs.tag }} ||  ${{ steps.tag.outputs.annotation }}
#          makeLatest: true
#          body: >
#            [Compare link](https://github.com/hslim8888/test-action/compare/${{ steps.latest_log.outputs.tag }}...${{ steps.new.outputs.tag }})
#            <br/>
#            <br/>
#            <b>PR LIST</b>
#            <br/>
#            ${{ steps.pr_list.outputs.pr_list }}
#            <br/>
#            <br/>
#            <br/>
#            <b>CHANGELOG</b>
#            <br/>
#            ${{ steps.changelog.outputs.changelog }}
#            <br/>
#            deployed by @${{ github.actor }}


