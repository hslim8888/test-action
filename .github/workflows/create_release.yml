name: Deploy Log
on:
  push:
    # 여기에 branches를 넣으면 or 조건으로 동작함
    # tags 로만 트리거 되는 동작은 github.ref 가 refs/tags/{tag-name} 이고,
    # checkout 을 하면 detached HEAD 상태로 동작
        # 또한, 태그 ref를 가져오기 위해 fetch-depth: 0 을 꼭 해줘야 함. 아니면 해당 커밋만 가져옴.
        # 브랜치 정보를 가져올 수 없어서 main 여부 체크를 할 수 없음.
    tags:
      - 'trigger*'

jobs:
  deploy-log:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # tag format: trigger-v2023-06-01-0915
      - name: Get triggered tag
        id: trigger_tag
        run: |
          echo ::set-output name=tag::$(git describe --tags --abbrev=0 | grep trigger)
      - name: Set new info
        id: new
        run: |
          echo ::set-output name=commit::$(git show-ref -s ${{ steps.trigger_tag.outputs.tag }})
          echo ::set-output name=tag::$(echo ${{ steps.trigger_tag.outputs.tag }} | cut -d'-' -f2-5)

      - name: print git show tag
        run: |
          git tag -ln ${{ steps.trigger_tag.outputs.tag }} 

      - name: get message if tag is annotate tag
        id: annotate_tag
        run: |
          echo ::set-output name=annotate::$(git for-each-ref refs/tags/${{  steps.trigger_tag.outputs.tag  }} --format='%(contents)')

      - name: print annotate message
        run: |
          echo ${{ steps.annotate_tag.outputs.annotate }}

      - name: Get latest deploy log
        id: latest_log
        run: |
          echo ::set-output name=tag::$(git tag --sort=-creatordate | grep -v trigger | sed -n 1p)
          echo ::set-output name=commit::$(git show-ref -s $(git tag --sort=-creatordate | grep -v trigger | sed -n 1p))

      - name: get pr merged commit
        id: merged_pr
        run: |
          echo ::set-output name=commit::$(git log --merges --oneline ${{ steps.latest_log.outputs.commit }}..${{ steps.new.outputs.commit }} | grep "Merge pull request") 

      - name: merged commit
        id: merged_commit
        run: |
          echo ::set-output name=latest::$(echo '${{ steps.merged_pr.outputs.commit }}' | head -n 1 | cut -d' ' -f1)
          echo ::set-output name=oldest::$(echo '${{ steps.merged_pr.outputs.commit }}' | tail -n 1 | cut -d' ' -f1)

      - name: List merged PRs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo ::set-output name=pr_list::$(gh pr list --search "${{ steps.merged_commit.outputs.oldest }}..${{ steps.merged_commit.outputs.latest }} is:pr is:merged" | | awk -F '\t' '{print "#" $1, $2, $3}')

      - name: print pr list
        run: |
          echo ${{ steps.pr_list.outputs.pr_list }}


#
#      - name: Get changelog
#        id: changelog
#        run: |
#          echo ::set-output name=changelog::$(git log --pretty=format:"[%h](https://github.com/hslim8888/test-action/commit/%h) - <b>%s</b></br>" ${{ steps.latest_log.outputs.commit }}..${{ steps.new.outputs.commit }})
#
#      - name: Create a release
#        uses: ncipollo/release-action@v1
#        with:
#          tag: ${{ steps.new.outputs.tag }}
#          name: Release ${{ steps.new.outputs.tag }}
#          makeLatest: true
#          body: >
#            [Compare link](https://github.com/hslim8888/test-action/compare/${{ steps.latest_log.outputs.tag }}...${{ steps.new.outputs.tag }})
#            <br/>
#            <br/>
#            ${{ steps.changelog.outputs.changelog }}
#            <br/>
#            deployed by @${{ github.actor }}
